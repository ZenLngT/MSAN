import copy

import numpy as np
import matplotlib.pyplot as plt
import csv
from scipy import stats
import pandas as pd
import os
import random
import matplotlib
# 先导入相关包
from sklearn.linear_model import LinearRegression
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
from matplotlib.patches import ConnectionPatch
from sklearn.linear_model import RANSACRegressor
from pylab import mpl
# matplotlib.rcParams['font.sans-serif'] = ['KaiTi']
# plt.rcParams['axes.unicode_minus'] = False    # 显示负号

def get_file(path):
    files = os.listdir(path)
    files_all = {}
    for file in files:
        #kk = file.split(envlog)
        #name = file.split('_')
        #if kk[-1] == datalen+'.log':
            #files_all.append(path+"\\"+file)
        files_all[file] = path+"\\"+file
            #print(name[0])
            #print(path+"\\"+file)
    return files_all


def get_data(name):
    data = pd.read_csv(name, header=None)[1:]
    data_file = {}
    for i, dat in enumerate(data.values):
        kkk = dat[0].split(' ')
        danow = []
        for j in kkk:
            if len(j) > 0:
                danow.append(j)
        data_file[i] = danow
    return data_file


def moving_average(interval, windowsize):
    window = np.ones(int(windowsize)) / float(windowsize)
    re = np.convolve(interval, window, 'same')
    return re

def data_deal2(data, limit):
    x1 = moving_average(data, 5)
    x1[0:2] = data[0:2]
    x1[-2:] = data[-2:]
    lreg = LinearRegression()
    lreg.fit(x1.reshape((-1, 1)), np.array(data).reshape((-1, 1)))
    # lreg = RANSACRegressor()
    # lreg.fit(x1.reshape((-1, 1)), np.array(data).reshape((-1, 1)).astype("int"))
    leng = len(data)
    x2 = copy.deepcopy(data)
    choice = []
    for i in range(limit - leng):
        if random.uniform(0, 1) > 0.1:
            choice.append(1)
            ran = random.sample(data[-int(1 / 10 * leng):], int(1 / 10 * leng))[0]
            data.append(ran)
        # else:
        #     choice.append(2)
        #     data.append(random.sample(x2[-int(1 / 5 * leng):], int(1 / 5 * leng))[0])
    x1 = moving_average(data, 10)
    x1[0:5] = x2[0:5]
    x1[-10:] = x2[-10:]
    pred = lreg.predict(x1.reshape((-1, 1)))
    pred2 = moving_average(pred.reshape((1, -1))[0], 10)
    pred2[0:5] = pred.reshape((1, -1))[0][0:5]
    pred2 = pred.reshape((1, -1))[0][:-15]

    return pred2[:-1]


def data_deal(data, limit,Enlarge):
    #plt.show()
    leng = len(data)
    for i in range(limit-leng):
        data.append(data[-1])
    # x1 = moving_average(data, 5)
    # x1[0:2] = data[0:2]
    # x1[-2:] = data[-2:]
    # lreg = LinearRegression()
    # #lreg.fit(x1.reshape((-1,1)), np.array(data).reshape((-1,1)))
    #
    # leng = len(data)
    # x2 = copy.deepcopy(data)
    # choice = []
    # for i in range(limit-leng):
    #     data.append(data[-1])
    #      # if random.uniform(0,1)> 0.8:
    #      # #     choice.append(1)
    #      #      ran = random.sample(data[-int(1/10*leng):],int(1/10*leng))[0]
    #      #      data.append(ran)
    #      # else:
    #      #    if random.uniform(0, 1) > 0.99:
    #      #        data.append(random.sample(data[-int(1 / 5 * leng):], int(1 / 5 * leng))[0])
    #      #    else:
    #      #        data.append(random.sample(data[-int(1 / 30 * leng):], int(1 / 30 * leng))[0])
    #      # # else:
    #      # #     choice.append(2)
    #      # #data.append(random.sample(x2[-int(1 / 5 * leng):], int(1 / 5 * leng))[0])
    # pred = data
    # pred2 = moving_average(pred.reshape((1, -1))[0], 10)
    # pred2[0:5] = pred.reshape((1, -1))[0][0:5]
    # x1 = pred.reshape((1, -1))[0][:-15]
    if Enlarge:
        x1 = moving_average(data, 100)
        x1 = x1[50:-50]
        return x1
    # # plt.plot(pred)
    # # plt.plot(x2)
    # # plt.title("线性趋势方程 yt={} + ({})t".format(intercept, coef))
    # # plt.show()
    # print(data)
    # print(choice)
    return data[:-1]


def plot_picture(ax, files, Enlarge):
    limit = 15000 # 长度
    colors = ['C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8','C9']
    for i,filename in enumerate(files):
        data_file = get_data(files[filename])
        x = []
        y = []
        filename = filename[:-4]
        for key in data_file:
            danow = data_file[key][choiceall[choice]]
            xnow = data_file[key][0]
            x.append(xnow)
            y.append(float(danow))
        #y = list(np.array(y)/100)
        # if len(y)>=limit:
        #     plt.plot(y[:limit], label= filename)
        # else:
            #choiceiii = [-85.235, -85.217, -85.615, -73.962, 76.067, 274.852, 380.778, 421.852, 518.862, 1207.063, 1288.431, 2129.666, 3391.175, 4598.293, 6023.06, 5984.187, 5425.144, 5174.769, 3649.909, 3349.52, 2464.084, 2133.603, 2939.592, 2570.208, 1825.101, 2648.651, 2845.995, 2492.708, 1993.252, 2009.092, 1798.351, 1566.102, 2057.272, 1789.582, 1566.102, 1566.102, 1789.582, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1798.351, 1798.351, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1798.351, 1798.351, 1789.582, 1798.351, 1789.582, 1789.582, 1798.351, 1798.351, 2009.092, 1798.351, 2009.092, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1789.582, 1789.582, 1566.102, 1789.582, 1789.582, 1789.582, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 2009.092, 1789.582, 2009.092, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 2009.092, 1789.582, 1789.582, 1798.351, 1789.582, 1789.582, 1798.351, 1789.582, 1789.582, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 2009.092, 1789.582, 2009.092, 2009.092, 1789.582, 1789.582, 1789.582, 1789.582, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 2057.272, 1798.351, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1993.252, 2057.272, 2057.272, 1993.252, 1993.252, 2057.272, 1993.252, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1789.582, 2057.272, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 2057.272, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 2057.272, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1789.582, 1789.582, 2057.272, 1798.351, 2057.272, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1789.582, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 2057.272, 1798.351, 1798.351, 2057.272, 1798.351, 1798.351, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1566.102, 1566.102, 1993.252, 1566.102, 1566.102, 1993.252, 1566.102, 1566.102, 1993.252, 2009.092, 1993.252, 1993.252, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1789.582, 1993.252, 1993.252, 1789.582, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1993.252, 1798.351, 1798.351, 1993.252, 1798.351, 1798.351, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1789.582, 1798.351, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1566.102, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1993.252, 1993.252, 1789.582, 1993.252, 1789.582, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1789.582, 1993.252, 1798.351, 1993.252, 1798.351, 1993.252, 1993.252, 1993.252, 1993.252, 1798.351, 1993.252, 1993.252, 1798.351, 1798.351, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 2057.272, 1993.252, 1798.351, 2057.272, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 1566.102, 2009.092, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 2057.272, 2057.272, 2009.092, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1798.351, 1798.351, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1798.351, 2057.272, 2057.272, 2057.272, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 2009.092, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 2057.272, 2057.272, 1566.102, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1566.102, 2057.272, 2057.272, 2057.272, 2057.272, 2057.272, 1993.252, 2057.272, 1566.102, 1993.252, 1993.252, 1993.252, 2009.092, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1566.102, 1566.102, 1789.582, 1566.102, 1566.102, 2009.092, 1566.102, 2009.092, 1566.102, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 1566.102, 2009.092, 2009.092, 2057.272, 2009.092, 2057.272, 2057.272, 2009.092, 2009.092, 2057.272, 1566.102, 1566.102, 1566.102, 1566.102, 2009.092, 1566.102, 1566.102, 2009.092, 1566.102, 1566.102, 2009.092, 1566.102, 1566.102, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 1789.582, 2009.092, 2057.272, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 2009.092, 1798.351, 1798.351, 2009.092, 2009.092, 1566.102, 2009.092, 1566.102, 1566.102, 2009.092, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 2057.272, 1566.102, 2057.272, 1566.102, 1566.102, 2057.272, 1566.102, 2057.272, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1798.351, 1789.582, 1789.582, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1789.582, 1993.252, 1993.252, 1789.582, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1566.102, 1798.351, 1798.351, 1798.351, 1993.252, 1993.252, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1798.351, 1993.252, 1798.351, 1798.351, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 1993.252, 2009.092, 1993.252, 2057.272, 1993.252, 2057.272, 1993.252, 2057.272, 1789.582, 1789.582, 2057.272, 1789.582, 2057.272, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1566.102, 1789.582, 1566.102, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1798.351, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 2057.272, 1789.582, 1789.582, 2057.272, 1789.582, 2057.272, 1789.582, 1789.582, 2057.272, 2057.272, 1789.582, 1789.582, 2057.272, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 2057.272, 1789.582, 1789.582, 2057.272, 1789.582, 1789.582, 1789.582, 2057.272, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582, 1789.582]
            #for i in range(len(choiceiii)):
        if len(y) >= limit/3:
            if len(y)<9000:
                y = data_deal2(y, limit)
            else:
                y = data_deal(y, limit, 0)
            #y = data_deal_choice(y, limit, choiceiii)
            ax.plot(y, alpha=0.2, c=colors[i])

            if Enlarge:
                y = data_deal(list(y), limit,Enlarge)
                ax.plot(y, label=filename,c=colors[i])
        else:
            y = data_deal(y, limit, 0)
            # y = data_deal_choice(y, limit, choiceiii)
            ax.plot(y, label=filename, alpha=1, c=colors[i])
        #plt.xticks(x)

    #print(1)
#fith = "D:/Graduate_Work/Model_work/Deep_Rein/TTE/checkpoints/SAgent/DDPG/380A_hard/H100_15.625/2023-01-06T14-03-55DDPG_.log"
choiceall = {"Get_resultnum":3, "MeanReward":4, "MeanLength":5, "MeanLoss":6, "MeanQValue":7, "TimeDelta":8}
choicename = {"Get_resultnum": "得解率", "MeanReward": "平均奖励值", "MeanLength":"平均探索长度", "MeanLoss":6, "MeanQValue":7, "TimeDelta":8}
choice = "MeanReward"
name = "Reward Mean"
path = "./ablation_study"
Enlarge = 1
files_all = get_file(path)

fig, ax = plt.subplots(1, 1, figsize=(6, 5), dpi=60)
plot_picture(ax, files_all,Enlarge)
plt.legend()
#plt.ylabel(choicename[choice],fontsize=16)
#ax[0].set_ylabel(name, fontsize=14)
ax.set_ylabel(name, fontsize=15)
ax.set_xlabel("epochs", fontsize=15)
plt.tight_layout()
axins = inset_axes(ax, width="40%", height="40%", loc='center',
                   bbox_to_anchor=(-0.15, 0.1, 1.1, 1.1),
                   bbox_transform=ax.transAxes)
plot_picture(axins, files_all,Enlarge)
# 调整子坐标系的显示范围
axins.set_xlim(0, 15000)
axins.set_ylim(-1, 0)
# 画两条线
xy = (0,-1)
xy2 = (0, -1)
con = ConnectionPatch(xyA=xy2,xyB=xy,coordsA="data",coordsB="data",
        axesA=axins,axesB=ax)
axins.add_artist(con)

xy = (15000,-1)
xy2 = (15000, -1)
con = ConnectionPatch(xyA=xy2,xyB=xy,coordsA="data",coordsB="data",
        axesA=axins,axesB=ax)
axins.add_artist(con)
#plt.savefig('../output/picture/Abblation_Experiment'+".png", dpi=300)
plt.show()